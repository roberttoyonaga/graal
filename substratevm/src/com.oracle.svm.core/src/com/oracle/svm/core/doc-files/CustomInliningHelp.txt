Force inlining along specified target paths.

Usage: --custom-inlining=config=<path>:strict=<boolean>:debug=<boolean>
example: --custom-inlining=config=path/to/your/config/file.json:strict=false:debug=false

Parameters:
	config: The path to your configuration JSON file.
	strict: Fail fatally if any target paths are not found. Defaults to false.
	debug: Report diagnostic information. Defaults to false.

The forced inlining occurs before the Native Image analysis phase during the image build.

Target paths are specified in a configuration JSON file.
Target paths should be formatted as json arrays. The order is caller -> callee_1 -> callee_2
Paths can be specified in any order within the configuration file.
There is no limit on the number of target paths that may be specified.
There is no limit on the length of specified target paths.
Incorrect/invalid paths will not cause errors.

Each method in a path must have the format: <fully qualified classname><method name><parameterType1parameterType2...>".
Ex.  Lio/vertx/core/http/impl/headers/HeadersMultiMap;add(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)


See the example below:

[
  ["Ljava/lang/String;charAt(I)", "Ljava/lang/StringLatin1;charAt([BI)"],
  ["Lio/netty/util/AsciiString;hashCode(Ljava/lang/CharSequence;)", "Lio/netty/util/internal/PlatformDependent;hashCodeAscii(Ljava/lang/CharSequence;)"],
]
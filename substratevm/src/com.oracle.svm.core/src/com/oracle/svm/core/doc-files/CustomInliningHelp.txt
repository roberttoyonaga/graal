Force inlining along specified target paths.

Usage: --custom-inlining=config=<path>:strict=<boolean>:debug=<boolean>
example: --custom-inlining=config=path/to/your/config/file.json:strict=false:debug=false

Parameters:
	config: The path to your configuration JSON file.
	strict: Fail fatally if any target paths are not found. Defaults to false.
	debug: Report diagnostic information. Defaults to false.

The forced inlining occurs before the Native Image analysis phase during the image build.

Inlining configuration is specified in a configuration JSON file.
The configuration JSON contains a single object with 2 top level fields: "paths" and "cutoffs".

"paths" :
Target paths may be specified under the "paths" field as elements of an array.
Each "paths" object should contain a "path" and "callsite" field.
The "path" should be formatted as an array. The order is caller -> callee_1 -> callee_2
The "callsite" field can be a specific method ID or null.
Specifying a method ID in the "callsite" means that forced inlining will only happen into that caller.
Leaving "callsite" as null means that the whole "path" will be inlined wherever it appears.

"cutoffs":
Each cutoff must specify a "cutoff" and "callsite".
The "cutoff" field must be a list containing a single method ID string.
This method and everything transitively called from it will be inlined.
The "callsite" field specifies the callsite that the cutoff applies to.
If set to null, the cuttoff applies to all callsites it's found at.

Other notes:
Path objects can be specified in any order within the configuration file.
There is no limit on the number of target paths that may be specified.
There is no limit on the length of specified target paths.
Incorrect/invalid paths will not cause errors.

Each method ID must have the format: <fully qualified classname><method name><parameterType1parameterType2...>".
Ex.  Lio/vertx/core/http/impl/headers/HeadersMultiMap;add(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)

See the example below:

{
  "paths":  [
	{
	  "path" : ["Ljava/lang/String;charAt(I)", "Ljava/lang/String;isLatin1()"],
	  "callsite": null
	},
	{
	  "path" :   ["Ljava/lang/String;isLatin1()"],
	  "callsite": "Ljava/lang/String;indexOf(I)",
	}
  ],
  "cutoffs": [
    {
      "cutoff" : ["Ljava/lang/String;charAt(I)"],
      "callsite": null
    }
  ]
}